{"version":3,"file":"router-1.1.1.js","sources":["../index.js","../src/main.js"],"sourcesContent":["class Router {\r\n  routes = [];\r\n  root = '/';\r\n  before;\r\n  page404;\r\n\r\n  constructor(options) {\r\n    if(options?.root) {\r\n      this.root = options.root === '/' ? '/' : '/' + this.trimSlashes(options.root) + '/';\r\n    }\r\n\r\n    if(typeof options?.before === 'function') {\r\n      this.before = options.before;\r\n    }\r\n\r\n    if(typeof options?.page404 === 'function') {\r\n      this.page404 = options.page404;\r\n    }\r\n\r\n    if(options?.routes?.length > 0) {\r\n      options.routes.forEach(route => {\r\n        this.add(route.rule, route.handler, route.options);\r\n      });\r\n    }\r\n  }\r\n\r\n  get fragment() {\r\n    let value = decodeURI(location.pathname);\r\n\r\n    if(this.root !== '/') {\r\n      value = value.replace(this.root, \"\");\r\n    }\r\n\r\n    return this.trimSlashes(value);\r\n  }\r\n\r\n  get query() {\r\n    return this.parseQuery(location.search);\r\n  }\r\n\r\n  add(rule, handler, options) {\r\n    this.routes.push({\r\n      rule: this.parseRouteRule(rule),\r\n      handler,\r\n      options\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  remove(param) {\r\n    if(typeof param === 'string') {\r\n      param = this.parseRouteRule(param);\r\n    }\r\n\r\n    this.routes.some((route, i) => {\r\n      if(route.handler === param || route.rule === param) {\r\n        this.routes.splice(i, 1);\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n\r\n    return this;\r\n  }\r\n\r\n  async redirectTo(url, state) {\r\n    const newUrl = this.transformURL(url);    \r\n\r\n    history.replaceState(state, null, this.root + newUrl);\r\n\r\n    await this.processUri();\r\n\r\n    return this;\r\n  }\r\n\r\n  async navigateTo(url, state) {\r\n    const newUrl = this.transformURL(url);   \r\n\r\n    history.pushState(state, null, this.root + newUrl);\r\n\r\n    await this.processUri();\r\n\r\n    return this;\r\n  }\r\n\r\n  refresh() {\r\n    return this.redirectTo(this.fragment + location.search, history.state);\r\n  }\r\n\r\n  transformURL(url) {\r\n    if(typeof url !== 'string') {\r\n      return '';\r\n    }\r\n\r\n    const newUrl = url.trim();\r\n    const splits = newUrl.split('?');\r\n\r\n    let path = '';\r\n    let query = '';\r\n\r\n    if(splits.length === 1) {\r\n      path = splits[0];\r\n    } else {\r\n      path = splits[0].trim();\r\n      query = splits[1].trim();      \r\n    }    \r\n\r\n    if(!path) {\r\n      path = this.fragment;\r\n    } else {\r\n      if(this.root !== '/') {\r\n        path = path.replace(this.root, \"\");\r\n      }\r\n\r\n      path = this.trimSlashes(path);\r\n    }\r\n\r\n    if(!query) {\r\n      return path;\r\n    }\r\n\r\n    return `${path}?${query}`;\r\n  }\r\n\r\n  trimSlashes(path) {\r\n    if(typeof path !== 'string') {\r\n      return '';\r\n    }\r\n    \r\n    return path.replace(/\\/$/, '').replace(/^\\//, '');\r\n  }\r\n\r\n  parseRouteRule(route) {\r\n    if(typeof route !== \"string\") {\r\n      return route;\r\n    }\r\n\r\n    let uri = this.trimSlashes(route);\r\n\r\n    let rule = uri\r\n      .replace(/([\\\\\\/\\-\\_\\.])/g, \"\\\\$1\")\r\n      .replace(/\\{[a-zA-Z]+\\}/g, \"(:any)\")\r\n      .replace(/\\:any/g, \"[\\\\w\\\\-\\\\_\\\\.]+\")\r\n      .replace(/\\:word/g, \"[a-zA-Z]+\")\r\n      .replace(/\\:num/g, \"\\\\d+\");\r\n\r\n    return new RegExp(\"^\" + rule + \"$\", \"i\");\r\n  }\r\n\r\n  parseQuery(query) {\r\n    let data = {};\r\n\r\n    if(typeof query !== \"string\") {\r\n      return data;\r\n    }\r\n\r\n    if(query[0] === '?') {\r\n      query = query.substr(1);\r\n    }\r\n\r\n    query.split('&').forEach(row => {\r\n      let parts = row.split('=');\r\n\r\n      if(parts[0] !== '') {\r\n        if(parts[1] === undefined) {\r\n          parts[1] = true;\r\n        }\r\n\r\n        data[decodeURIComponent(parts[0])] = parts[1];\r\n      }\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  async findRoute() {\r\n    let fragment = this.fragment;\r\n\r\n    let found = false;\r\n\r\n    for(let route of this.routes) {\r\n      let match = fragment.match(route.rule);\r\n\r\n      if(match) {\r\n        match.shift();\r\n\r\n        let query = this.query;\r\n        let page = {\r\n          fragment,\r\n          query,\r\n          match,\r\n          options: route.options\r\n        };\r\n\r\n        let doBreak = this.before?.(page);\r\n\r\n        if(!doBreak) {\r\n          await route.handler?.(page);\r\n        }\r\n\r\n        found = true;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return found;\r\n  }\r\n\r\n  async processUri() {\r\n    let fragment = this.fragment;\r\n\r\n    let found = await this.findRoute();\r\n\r\n    if(!found) {\r\n      this.page404?.(fragment);\r\n    }\r\n  }\r\n\r\n  addUriListener() {\r\n    window.onpopstate = this.processUri.bind(this);\r\n  }\r\n\r\n  removeUriListener() {\r\n    window.onpopstate = null;\r\n  }\r\n}\r\n\r\nexports.Router = Router;\r\n","const { Router } = require('../index');\r\n\r\nlet router = new Router({\r\n  routes: [{\r\n    rule: '',\r\n    handler(page) {\r\n      console.log(page);\r\n    }\r\n  },{\r\n    rule: 'hello/(:any)',\r\n    handler(page) {\r\n      console.log(page);\r\n    }\r\n  }, {\r\n    rule: 'category/(:num)/post/(:num)',\r\n    handler(page) {\r\n      console.log(page);\r\n    }\r\n  }, {\r\n    rule: 'search',\r\n    handler(page) {\r\n      console.log(page);\r\n    }\r\n  }]\r\n});\r\n\r\nwindow.router = router;\r\n    "],"names":["routes","root","before","page404","constructor","options","this","trimSlashes","length","forEach","route","add","rule","handler","fragment","value","decodeURI","location","pathname","replace","query","parseQuery","search","push","parseRouteRule","remove","param","some","i","splice","async","url","state","newUrl","transformURL","history","replaceState","processUri","pushState","refresh","redirectTo","splits","trim","split","path","RegExp","data","substr","row","parts","undefined","decodeURIComponent","found","match","shift","page","doBreak","findRoute","addUriListener","window","onpopstate","bind","removeUriListener","Router","require$$0","router","console","log"],"mappings":"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"}